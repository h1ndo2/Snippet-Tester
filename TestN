local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

local Options = Library.Options
local Toggles = Library.Toggles

Library.ForceCheckbox = false
Library.ShowToggleFrameInKeybinds = true

local Window = Library:CreateWindow({
    Title = "Snippet",
    Footer = "",
    Icon = nil,
    NotifySide = "Right",
    ShowCustomCursor = false,
})

local Tabs = {
    Main = Window:AddTab("Main", "star"),
    Players = Window:AddTab("Players", "users"),
    AutoFarm = Window:AddTab("AutoFarm", "tractor"),
    Combat = Window:AddTab("Combat", "skull"),
    Bypasses = Window:AddTab("Bypasses", "shield"),
    Credits = Window:AddTab("Credits", "star"),
    ["UI Settings"] = Window:AddTab("UI Settings", "settings"),
}


--CREDITS

local CreditsGroupBox = Tabs.Credits:AddLeftGroupbox("Credits")
CreditsGroupBox:AddLabel("Created by Snippet Team", true)
CreditsGroupBox:AddLabel("Developed By h1ndo2 🔥", true)

local ExecutorGroupBox = Tabs.Credits:AddRightGroupbox("Executor Info")
local executorName = identifyexecutor and identifyexecutor() or "Unknown"
ExecutorGroupBox:AddLabel("Executor: "..executorName, true)

local TeleportGroupBox = Tabs.Main:AddLeftGroupbox("Teleport")

local TeleportLocations = {
    { Name = "Bank ", Position = Vector3.new(-207.377, 283.6329, -2240.6583 + 834 + 192) },
    { Name = "Money Wash ", Position = Vector3.new(-376.1771 - 601, 197.6838 + 56, -1975.5855000000001 + 1035 + 248) },
    { Name = "Crafting Roof", Position = Vector3.new(-1241.9578999999999 + 174 + 680, 340.3467, -558.864) },
    { Name = "Store Items", Position = Vector3.new(48917.898400000005 + 19597, 53680.5 - 396 - 343, -796.09) },
    { Name = "Construction Site", Position = Vector3.new(-3120.8307 + 135 + 1254, 1393.8123 - 1023, -5490.8387 + 4314) },
    { Name = "Backpack Shop", Position = Vector3.new(-1248.0961303710938 + 102 + 472, 253.59814453125, -684.4346313476562) },
    { Name = "Ice Box", Position = Vector3.new(-120.14073181152344 - 95, 283.5154113769531, -1173.6910400390625 - 85) },
    { Name = "Frozen Shop", Position = Vector3.new(-338.706 + 148, 174.8549 + 109, -2634.5918 + 157 + 1307) },
    { Name = "Drip Shop ", Position = Vector3.new(7378.695300000007 + 60084, 18630.0352 - 8141, 205.58950000000004 + 344) },
    { Name = "Pawn Shop ", Position = Vector3.new(-23.643100000000004 - 1026, 391.5367 - 138, -1118.2696999999998 + 300 + 4) },
    { Name = "Pent House ", Position = Vector3.new(-492.4557 + 112 + 250, 168.4685 + 251, -1422.7767 + 854) },
    { Name = "Sewer ", Position = Vector3.new(40197.00780000001 + 40872, 133133.0313, 125.0926 + 43) },
    { Name = "GunShop Lobby ", Position = Vector3.new(-1002.4224, 563.6382 - 310, -1685.9125 + 244 + 638) },
    { Name = "Chicken Wings ", Position = Vector3.new(-1559.9142000000002 + 512 + 90, 253.5367, -815.9442) },
    { Name = "Deli Grocery ", Position = Vector3.new(-419.7261 - 508, 253.1368, -691.3687) },
    { Name = "Dominos ", Position = Vector3.new(-196.76620000000003 - 543, 253.229, -2519.422 + 1564) },
    { Name = "GunShop 1 ", Position = Vector3.new(198909.8984 - 105940, 488.9688000000024 + 121609, 17023.8867) },
    { Name = "GunShop 2 ", Position = Vector3.new(66197.125, 63201.7188 + 60414, 5749.2305) },
    { Name = "GunShop 3 ", Position = Vector3.new(61041.3086 - 55 - 166, 16979.148400000005 + 70630, -36.47460000000001 - 315) },
    { Name = "Car Dealer ", Position = Vector3.new(-379.0562, 441.2626 - 188, -2614.4066000000003 + 34 + 1334) },
}

local selectedTeleport = TeleportLocations[1]

TeleportGroupBox:AddDropdown("TeleportSelector", {
    Values = (function()
        local names = {}
        for _, location in ipairs(TeleportLocations) do
            table.insert(names, location.Name)
        end
        return names
    end)(),
    Default = TeleportLocations[1].Name,
    Text = "Select Location",
    Callback = function(value)
        for _, location in ipairs(TeleportLocations) do
            if location.Name == value then
                selectedTeleport = location
                break
            end
        end
    end,
})

TeleportGroupBox:AddButton({
    Text = "Teleport",
    Func = function()
        if not selectedTeleport then
            Library:Notify({
                Title = "Teleport Error",
                Description = "No location selected!",
                Time = 5,
            })
            return
        end

        local player = game.Players.LocalPlayer
        if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
            Library:Notify({
                Title = "Teleport Error",
                Description = "Character or HumanoidRootPart not found!",
                Time = 5,
            })
            return
        end

        local success, err = pcall(function()
            player.Character.HumanoidRootPart.CFrame = CFrame.new(selectedTeleport.Position)
        end)

        if success then
            Library:Notify({
                Title = "Teleport Success",
                Description = "Teleported to " .. selectedTeleport.Name .. "",
                Time = 5,
            })
        else
            Library:Notify({
                Title = "Teleport Error",
                Description = "failed for no reason : " .. err,
                Time = 5,
            })
        end
    end,
    Tooltip = "Teleports to the selected location",
})

local GunModGroupBox = Tabs.Main:AddRightGroupbox("Gun Modifications 🔫")

GunModGroupBox:AddButton({
    Text = "Infinite Ammo",
    Func = function()
        local settings = require(game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Setting)
        settings.LimitedAmmoEnabled = false
        settings.MaxAmmo = 9e9
        settings.AmmoPerMag = 9e9
        settings.Ammo = 9e9
    end,
    DoubleClick = false,
    Tooltip = "Grants infinite ammunition for the equipped weapon"
})

GunModGroupBox:AddButton({
    Text = "No Recoil",
    Func = function()
        require(game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Setting).Recoil = 0
    end,
    DoubleClick = false,
    Tooltip = "Removes all recoil from your weapon"
})

GunModGroupBox:AddButton({
    Text = "Automatic Gun",
    Func = function()
        require(game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Setting).Auto = true
    end,
    DoubleClick = false,
    Tooltip = "Converts weapon to fully automatic"
})

GunModGroupBox:AddButton({
    Text = "No Fire Rate",
    Func = function()
        require(game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Setting).FireRate = 0
    end,
    DoubleClick = false,
    Tooltip = "Removes fire rate delay"
})

GunModGroupBox:AddButton({
    Text = "Inf Damage",
    Func = function()
        require(game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Setting).BaseDamage = 9e9
    end,
    DoubleClick = false,
    Tooltip = "Sets weapon damage to maximum"
})

local AutoFarmGroupBox = Tabs.AutoFarm:AddLeftGroupbox("ConstructionFarm")

local constructionRunning = false

local constructionToggle = AutoFarmGroupBox:AddToggle("ConstructionFarm", {
    Text = "Construction AutoFarm",
    Default = false,
    Callback = function(Value)
        local speaker = game:GetService("Players").LocalPlayer
        if not speaker then return end  

        local function getCharacter()
            return speaker.Character or speaker.CharacterAdded:Wait()
        end

        local function getBackpack()
            return speaker:FindFirstChild("Backpack")
        end

        local function hasPlyWood()
            local backpack = getBackpack()
            local character = getCharacter()
            return (backpack and backpack:FindFirstChild("PlyWood")) or (character and character:FindFirstChild("PlyWood"))
        end

        local function equipPlyWood()
            local backpack = getBackpack()
            if backpack then
                local plyWood = backpack:FindFirstChild("PlyWood")
                if plyWood then
                    plyWood.Parent = getCharacter()
                end
            end
        end

        local function fireInstantPrompt(prompt)
            if prompt and prompt:IsA("ProximityPrompt") and prompt.Enabled then
                prompt.HoldDuration = 0
                fireproximityprompt(prompt)
            end
        end

        local function grabWood()
            local char = getCharacter()
            char:SetPrimaryPartCFrame(CFrame.new(-1727, 371, -1178))
            task.wait(0.1)

            while constructionRunning and not hasPlyWood() do
                local prompt = workspace.ConstructionStuff["Grab Wood"]:FindFirstChildOfClass("ProximityPrompt")
                fireInstantPrompt(prompt)
                task.wait(0.1)
                equipPlyWood()
            end
        end

        local function buildWall(name, position)
            local prompt = workspace.ConstructionStuff[name]:FindFirstChildOfClass("ProximityPrompt")

            while constructionRunning and prompt and prompt.Enabled do
                getCharacter():SetPrimaryPartCFrame(position)
                fireInstantPrompt(prompt)
                task.wait(0.05)

                if not hasPlyWood() then
                    grabWood()
                end
            end
        end

        local function quitJob()
            local quitPrompt = workspace.ConstructionStuff:FindFirstChild("Quit Job")
            if quitPrompt then
                local prompt = quitPrompt:FindFirstChildOfClass("ProximityPrompt")
                if prompt then
                    getCharacter():SetPrimaryPartCFrame(quitPrompt.CFrame + Vector3.new(0, 2, 0))
                    task.wait(0.2)
                    fireInstantPrompt(prompt)
                end
            end
        end

        if Value then
            constructionRunning = true
            getCharacter():SetPrimaryPartCFrame(CFrame.new(-1728, 371, -1172))
            task.wait(0.2)
            fireInstantPrompt(workspace.ConstructionStuff["Start Job"]:FindFirstChildOfClass("ProximityPrompt"))

            task.spawn(function()
                while constructionRunning do
                    if not hasPlyWood() then
                        grabWood()
                    end

                    buildWall("Wall2 Prompt", CFrame.new(-1705, 368, -1151))
                    buildWall("Wall3 Prompt", CFrame.new(-1732, 368, -1152))
                    buildWall("Wall4 Prompt2", CFrame.new(-1772, 368, -1152))
                    buildWall("Wall1 Prompt3", CFrame.new(-1674, 368, -1166))

                    task.wait(1)
                end
            end)
        else
            constructionRunning = false
            quitJob()
        end
    end
})

local AutoFarmGroupBox = Tabs.AutoFarm:AddLeftGroupbox("Studio AutoFarm")

local studioAutoFarmToggle = AutoFarmGroupBox:AddToggle("StudioAutoFarm", {
    Text = "Studio AutoFarm",
    Default = false,
    Callback = function(State)
        local speaker = game:GetService("Players").LocalPlayer
        if not speaker then return end

        local function getCharacter()
            return speaker.Character or speaker.CharacterAdded:Wait()
        end

        local function getRootPart()
            return getCharacter():FindFirstChild("HumanoidRootPart")
        end

        local function robStudioPrompt(prompt)
            if prompt and prompt:IsA("ProximityPrompt") and prompt.Enabled then
                local rootPart = getRootPart()
                if rootPart then
                    rootPart.CFrame = prompt.Parent.CFrame + Vector3.new(0, 2, 0)
                    task.wait(0.2)
                    prompt.HoldDuration = 0
                    prompt.RequiresLineOfSight = false

                    local success, err = pcall(function()
                        fireproximityprompt(prompt, 0)
                    end)

                    task.wait(0.4)
                    return true
                end
            end
            return false
        end

        if State then
            local studioMoneyFolder = workspace:FindFirstChild("StudioPay") and workspace.StudioPay:FindFirstChild("Money")
            if not studioMoneyFolder then return end

            local rootPart = getRootPart()
            local originalCFrame = rootPart and rootPart.CFrame

            local studioPayNames = {"StudioPay1", "StudioPay2", "StudioPay3"}
            local robbedAny = false

            for _, name in ipairs(studioPayNames) do
                local studio = studioMoneyFolder:FindFirstChild(name)
                local prompt = studio and studio:FindFirstChild("StudioMoney1") and studio.StudioMoney1:FindFirstChild("Prompt")

                if prompt and prompt.Enabled then
                    if robStudioPrompt(prompt) then
                        robbedAny = true
                    end
                end
            end

            if not robbedAny then
                Library:Notify({
                    Title = "No Money Found",
                    Description = "No money left, try again later.",
                    Time = 3,
                })
            end

            -- Teleport back
            if rootPart and originalCFrame then
                rootPart.CFrame = originalCFrame
            end

            -- Turn off the toggle
            _G.StudioAutofarm = false
            World:GetToggle("StudioAutofarm").Set(false)
        end
    end
})


local XenoMoneyGroupBox = Tabs.Main:AddRightGroupbox("Inf Money")

XenoMoneyGroupBox:AddLabel("Steps:", true)
XenoMoneyGroupBox:AddLabel("1. buy the stuff", true)
XenoMoneyGroupBox:AddLabel("2. Cook them", true)
XenoMoneyGroupBox:AddLabel("3. Then click on inf money", true)


XenoMoneyGroupBox:AddButton({
    Text = "Buy FijiWater ",
    Func = function()
        game:GetService("ReplicatedStorage").ExoticShopRemote:InvokeServer("FijiWater")
    end
})

XenoMoneyGroupBox:AddButton({
    Text = "Buy FreshWater",
    Func = function()
        game:GetService("ReplicatedStorage").ExoticShopRemote:InvokeServer("FreshWater")
    end
})

XenoMoneyGroupBox:AddButton({
    Text = "Buy Ice-Fruit Cupz",
    Func = function()
        game:GetService("ReplicatedStorage").ExoticShopRemote:InvokeServer("Ice-Fruit Cupz")
    end
})

XenoMoneyGroupBox:AddButton({
    Text = "Buy Ice-Fruit Bag",
    Func = function()
        game:GetService("ReplicatedStorage").ExoticShopRemote:InvokeServer("Ice-Fruit Bag")
    end
})

XenoMoneyGroupBox:AddButton({
    Text = "Start Cooking",
    Func = function()
        local cookingPos = Vector3.new(-706, 257, -484)
        local character = game.Players.LocalPlayer.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            character.HumanoidRootPart.CFrame = CFrame.new(cookingPos)
        end
    end,
    Tooltip = "Teleports to where you gotta cook the stuff"
})

XenoMoneyGroupBox:AddButton({
    Text = "Infinite money",
    Func = function()
        local player = game.Players.LocalPlayer
        local character = player.Character
        local hrp = character and character:FindFirstChild("HumanoidRootPart")
        local camera = workspace.CurrentCamera
        if not hrp or not camera then return end

        -- Save original position & camera direction
        local originalCFrame = hrp.CFrame
        local originalCameraCFrame = camera.CFrame

        -- Find the sell prompt
        local promptParent = workspace:FindFirstChild("IceFruit Sell") or workspace:FindFirstChild("GUNS") or workspace
        local SellPrompt = promptParent and promptParent:FindFirstChildWhichIsA("ProximityPrompt", true)
        if not SellPrompt or not SellPrompt.Parent then return end

        -- Prompt position
        local promptPart = SellPrompt.Parent
        local promptPos = promptPart:IsA("BasePart") and promptPart.Position or hrp.Position
        local approachPos = promptPos + Vector3.new(0, 0, 2) -- Stand slightly in front
        local lookTarget = promptPos - Vector3.new(0, 1.5, 0)

        -- Teleport player
        hrp.CFrame = CFrame.new(approachPos, lookTarget)

        -- Rotate camera to look at the prompt
        camera.CFrame = CFrame.new(camera.CFrame.Position, lookTarget)

        task.wait(0.1)

        -- Set prompt to instant interact
        SellPrompt.HoldDuration = 0
        SellPrompt.Enabled = true

        -- Interact loop (stop if player moves away)
        for i = 1, 6000 do
            if (hrp.Position - promptPos).Magnitude > 10 then
                warn("Moved away from prompt, stopping.")
                break
            end
            fireproximityprompt(SellPrompt, 0)
        end

        -- Return to original position and camera
        task.wait(0.3)
        hrp.CFrame = originalCFrame
        camera.CFrame = originalCameraCFrame
    end,
    Tooltip = "",
})

local PlayerMovementGroupBox = Tabs.Players:AddLeftGroupbox("Player Movement")

-- Player Movement Settings
local flying = false
local speed = 200
local ctrl = {f = 0, b = 0, l = 0, r = 0}
local lastctrl = {f = 0, b = 0, l = 0, r = 0}

local plr = game.Players.LocalPlayer
local mouse = plr:GetMouse()
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Sliders
PlayerMovementGroupBox:AddSlider("WalkSpeedSlider", {
    Text = "Change walkspeed ",
    Default = 16,
    Min = 16,
    Max = 200,
    Rounding = 1,
    Callback = function(value)
        if Toggles.WalkSpeedToggle.Value then
            local char = plr.Character or plr.CharacterAdded:Wait()
            char:WaitForChild("Humanoid").WalkSpeed = value
        end
    end,
})

PlayerMovementGroupBox:AddSlider("FlySpeedSlider", {
    Text = "Change Fly speed",
    Default = 200,
    Min = 10,
    Max = 1000,
    Rounding = 1,
    Callback = function(value)
        speed = value
    end,
})

-- Toggles
PlayerMovementGroupBox:AddToggle("WalkSpeedToggle", {
    Text = "Walk Speed",
    Default = false,
    Callback = function(value)
        local char = plr.Character or plr.CharacterAdded:Wait()
        local humanoid = char:WaitForChild("Humanoid")
        humanoid.WalkSpeed = value and Options.WalkSpeedSlider.Value or 16
    end,
})

-- Fly Logic
local function Fly()
    local char = plr.Character or plr.CharacterAdded:Wait()
    local torso = char:WaitForChild("HumanoidRootPart")

    local bg = Instance.new("BodyGyro", torso)
    bg.P = 9e4
    bg.MaxTorque = Vector3.new(9e9, 9e9, 9e9)
    bg.CFrame = torso.CFrame

    local bv = Instance.new("BodyVelocity", torso)
    bv.Velocity = Vector3.new(0, 0.1, 0)
    bv.MaxForce = Vector3.new(9e9, 9e9, 9e9)

    char:WaitForChild("Humanoid").PlatformStand = true
    flying = true

    while flying do
        task.wait()
        local camCF = workspace.CurrentCamera.CFrame
        if (ctrl.l + ctrl.r ~= 0) or (ctrl.f + ctrl.b ~= 0) then
            bv.Velocity = (
                (camCF.LookVector * (ctrl.f + ctrl.b)) +
                ((camCF * CFrame.new(ctrl.l + ctrl.r, 0, 0)).Position - camCF.Position)
            ).Unit * speed
            lastctrl = {f = ctrl.f, b = ctrl.b, l = ctrl.l, r = ctrl.r}
        else
            bv.Velocity = Vector3.new(0, 0.1, 0)
        end
        bg.CFrame = camCF
    end

    ctrl = {f = 0, b = 0, l = 0, r = 0}
    lastctrl = {f = 0, b = 0, l = 0, r = 0}
    char:WaitForChild("Humanoid").PlatformStand = false
    bv:Destroy()
    bg:Destroy()
end

-- Fly Toggle
PlayerMovementGroupBox:AddToggle("FlyToggle", {
    Text = "Enable Fly",
    Default = false,
    Callback = function(state)
        if state then
            flying = true
            task.spawn(Fly)
        else
            flying = false
        end
    end,
})

-- Fly Controls
mouse.KeyDown:Connect(function(key)
    if not flying then return end
    key = key:lower()
    if key == "w" then ctrl.f = 1 end
    if key == "s" then ctrl.b = -1 end
    if key == "a" then ctrl.l = -1 end
    if key == "d" then ctrl.r = 1 end
end)

mouse.KeyUp:Connect(function(key)
    key = key:lower()
    if key == "w" then ctrl.f = 0 end
    if key == "s" then ctrl.b = 0 end
    if key == "a" then ctrl.l = 0 end
    if key == "d" then ctrl.r = 0 end
end)

-- Infinite Jump
local infJumpEnabled = false
PlayerMovementGroupBox:AddToggle("InfiniteJumpToggle", {
    Text = "Infinite Jump",
    Default = false,
    Callback = function(state)
        infJumpEnabled = state
    end,
})

UserInputService.JumpRequest:Connect(function()
    if infJumpEnabled and plr.Character and plr.Character:FindFirstChild("Humanoid") then
        plr.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
    end
end)

-- Noclip
local noclipEnabled = false
local noclipConnection
PlayerMovementGroupBox:AddToggle("NoclipToggle", {
    Text = "Noclip",
    Default = false,
    Callback = function(state)
        noclipEnabled = state
        if state then
            noclipConnection = RunService.Stepped:Connect(function()
                if plr.Character and plr.Character:FindFirstChild("Humanoid") then
                    for _, part in pairs(plr.Character:GetDescendants()) do
                        if part:IsA("BasePart") and part.CanCollide then
                            part.CanCollide = false
                        end
                    end
                end
            end)
        else
            if noclipConnection then
                noclipConnection:Disconnect()
                noclipConnection = nil
            end
        end
    end,
})

local PlayerTeleportGroupBox = Tabs.Players:AddRightGroupbox("Player Teleport")

local function GetPlayerNames()
    local names = {}
    for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
        if player ~= game.Players.LocalPlayer then
            table.insert(names, player.Name)
        end
    end
    return names
end

local playerNames = GetPlayerNames()

PlayerTeleportGroupBox:AddDropdown("PlayerTeleportSelector", {
    Values = playerNames,
    Default = playerNames[1] or "",
    Text = "Select Player 👤",
})

local spectating = false
local spectateConnection
local killBringConnection = nil
local originalPosition = nil

-- Spectate toggle
PlayerTeleportGroupBox:AddToggle("SpectateToggle", {
    Text = "Spectate Player 🎥",
    Default = false,
    Tooltip = "Toggle to spectate the selected player",
    Callback = function(state)
        spectating = state
        local selectedPlayerName = Options.PlayerTeleportSelector.Value
        local targetPlayer = game:GetService("Players"):FindFirstChild(selectedPlayerName)
        local camera = workspace.CurrentCamera

        if not targetPlayer then return end

        if spectating then
            spectateConnection = task.spawn(function()
                while spectating and targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Humanoid") do
                    camera.CameraSubject = targetPlayer.Character.Humanoid
                    task.wait(0.1)
                end
            end)
        else
            if spectateConnection then
                task.cancel(spectateConnection)
            end
            camera.CameraSubject = game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid")
        end
    end
})

PlayerTeleportGroupBox:AddToggle("KillBringToggle", {
    Text = "KillBring Player",
    Default = false,
    Tooltip = "",
    Callback = function(state)
        local selectedPlayerName = Options.PlayerTeleportSelector.Value
        local targetPlayer = game:GetService("Players"):FindFirstChild(selectedPlayerName)

        if not targetPlayer or not targetPlayer.Character or not targetPlayer.Character:FindFirstChild("HumanoidRootPart") then return end

        if state then
            originalPosition = targetPlayer.Character.HumanoidRootPart.CFrame

            killBringConnection = game:GetService("RunService").Heartbeat:Connect(function()
                if not state or not targetPlayer.Character or not targetPlayer.Character:FindFirstChild("HumanoidRootPart") then return end

                local localRoot = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                if not localRoot then return end

                local forward = localRoot.CFrame.LookVector
                local offsetPos = localRoot.Position + forward * 5
                targetPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(offsetPos)
            end)
        else
            if killBringConnection then
                killBringConnection:Disconnect()
                killBringConnection = nil
            end
            if originalPosition and targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                targetPlayer.Character.HumanoidRootPart.CFrame = originalPosition
            end
        end
    end
})

local circleConnection = nil
local originalPositions = {}
local originalToolStates = {}
local playerCircleRadius = 15

PlayerTeleportGroupBox:AddToggle("PlayerCircleToggle", {
    Text = "Bring all",
    Default = false,
    Tooltip = "Makes a circle and you can kill them or whatever you want to do",
    Callback = function(state)
        local localPlayer = game.Players.LocalPlayer

        if circleConnection then
            circleConnection:Disconnect()
            circleConnection = nil
        end

        if state then
            originalPositions = {}
            originalToolStates = {}

            local allPlayers = game:GetService("Players"):GetPlayers()
            local orbitPlayers = {}

            for _, player in ipairs(allPlayers) do
                if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    originalPositions[player.Name] = player.Character.HumanoidRootPart.CFrame
                    table.insert(orbitPlayers, player)

                    -- Disable damage tools
                    for _, tool in ipairs(player.Backpack:GetChildren()) do
                        if tool:IsA("Tool") and tool:FindFirstChild("Handle") then
                            originalToolStates[player.Name] = originalToolStates[player.Name] or {}
                            originalToolStates[player.Name][tool.Name] = tool.Parent
                            tool.Parent = nil -- Temporarily unequip tool
                        end
                    end

                    for _, tool in ipairs(player.Character:GetChildren()) do
                        if tool:IsA("Tool") and tool:FindFirstChild("Handle") then
                            originalToolStates[player.Name] = originalToolStates[player.Name] or {}
                            originalToolStates[player.Name][tool.Name] = tool.Parent
                            tool.Parent = nil
                        end
                    end
                end
            end

            circleConnection = game:GetService("RunService").Heartbeat:Connect(function()
                local localRoot = localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")
                if not localRoot then return end

                local angleStep = (2 * math.pi) / #orbitPlayers
                for index, player in ipairs(orbitPlayers) do
                    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                        local angle = index * angleStep
                        local offset = Vector3.new(math.cos(angle), 0, math.sin(angle)) * playerCircleRadius
                        local targetPos = localRoot.Position + offset
                        player.Character.HumanoidRootPart.CFrame = CFrame.new(targetPos, localRoot.Position)
                    end
                end
            end)

        else
            -- Restore players' original positions
            for name, cframe in pairs(originalPositions) do
                local player = game.Players:FindFirstChild(name)
                if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    player.Character.HumanoidRootPart.CFrame = cframe
                end
            end
            originalPositions = {}

            -- Restore tools
            for playerName, tools in pairs(originalToolStates) do
                local player = game.Players:FindFirstChild(playerName)
                if player then
                    for toolName, originalParent in pairs(tools) do
                        local tool = player:FindFirstChild(toolName) or player.Backpack:FindFirstChild(toolName)
                        if tool then
                            tool.Parent = originalParent
                        end
                    end
                end
            end
            originalToolStates = {}

            -- Disconnect movement loop
            if circleConnection then
                circleConnection:Disconnect()
                circleConnection = nil
            end
        end
    end
})

-- Teleport to player
PlayerTeleportGroupBox:AddButton({
    Text = "Teleport to Player",
    Func = function()
        local selectedPlayerName = Options.PlayerTeleportSelector.Value
        local targetPlayer = game:GetService("Players"):FindFirstChild(selectedPlayerName)

        if not targetPlayer then return end
        if not targetPlayer.Character or not targetPlayer.Character:FindFirstChild("HumanoidRootPart") then return end
        if not game.Players.LocalPlayer.Character or not game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then return end

        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = targetPlayer.Character.HumanoidRootPart.CFrame
    end,
    Tooltip = "Teleports you to the selected player",
})

-- Refresh player list
PlayerTeleportGroupBox:AddButton({
    Text = "Refresh Player List 🔄",
    Func = function()
        local updatedNames = GetPlayerNames()
        Options.PlayerTeleportSelector:SetValues(updatedNames)
    end,
    Tooltip = "Refreshes the player list",
})


local MoneyGroupBox = Tabs.Main:AddLeftGroupbox("Dupe Guns")

local lastDupeTime = 0
local dupeCooldown = 25

MoneyGroupBox:AddButton({
    Text = "Safe Dupe",
    Func = function()
        local currentTime = os.time()
        if currentTime - lastDupeTime < dupeCooldown then
            Library:Notify({
                Title = "Cooldown",
                Description = string.format("Please wait %d seconds before duping again!", dupeCooldown - (currentTime - lastDupeTime)),
                Time = 3,
            })
            return
        end

        lastDupeTime = currentTime
        Library:Notify({
            Title = "Safe Dupe",
            Description = "Processing...",
            Time = 5,
        })

        local replicatedStorage = game:GetService("ReplicatedStorage")
        local players = game:GetService("Players")
        local workspace = game:GetService("Workspace")

        local function getCharacter()
            return players.LocalPlayer.Character
        end

        local function teleportTo(position)
            getCharacter().HumanoidRootPart.CFrame = CFrame.new(position.Position.X + 2, position.Position.Y, position.Position.Z)
        end

        local inventory = replicatedStorage:WaitForChild("Inventory")
        local backpackRemote = replicatedStorage:WaitForChild("BackpackRemote")

        if getCharacter():FindFirstChildOfClass("Tool") then
            local step = 0
            local toolName
            local safe
            local originalCFrame

            while true do
                if step == 4 then
                    task.wait(0.5)
                    teleportTo(originalCFrame)
                    Library:Notify({
                        Title = "Safe Dupe",
                        Description = "Duplication Complete!",
                        Time = 5,
                    })
                    break
                end
                if step == 2 then
                    task.spawn(function()
                        backpackRemote:InvokeServer("Store", toolName)
                    end)
                    task.spawn(function()
                        inventory:FireServer("Change", toolName, "Backpack", safe)
                    end)
                    task.wait(1.5)
                    step = 3
                end
                if step == 3 then
                    teleportTo(originalCFrame)
                    task.wait(1)
                    backpackRemote:InvokeServer("Grab", toolName)
                    step = 4
                end
                if step == 0 then
                    toolName = getCharacter():FindFirstChildOfClass("Tool").Name
                    getCharacter():FindFirstChildOfClass("Humanoid"):UnequipTools()
                    safe = workspace["1# Map"]["2 Crosswalks"].Safes:GetChildren()[1]
                    step = 1
                end
                if step == 1 then
                    originalCFrame = getCharacter():FindFirstChild("HumanoidRootPart").CFrame
                    teleportTo(safe.Union.CFrame)
                    task.wait(0.5)
                    step = 2
                end
            end
        else
            Library:Notify({
                Title = "Safe Dupe",
                Description = "No Tool Found!",
                Time = 5,
            })
        end
    end,
    Tooltip = "Duplicates the equipped tool using a safe",
})

local BankGroupBox = Tabs.Players:AddRightGroupbox("Bank / ATM")


BankGroupBox:AddInput("WithdrawAmount", {
    Text = "Withdraw Amount",
    Default = "",
    Numeric = true,
    Finished = true,
    Callback = function(value)
        local amount = tonumber(value)
        if amount and amount > 0 and amount <= 90000 then
            game:GetService("ReplicatedStorage").BankAction:FireServer("with", amount)
            Library:Notify({
                Title = "Withdraw",
                Description = "Withdrew $" .. amount,
                Time = 3,
            })
        else
            Library:Notify({
                Title = "Error",
                Description = "Invalid amount! Max 90K.",
                Time = 3,
            })
        end
    end
})

BankGroupBox:AddInput("DepositAmount", {
    Text = "Deposit Amount",
    Default = "",
    Numeric = true,
    Finished = true,
    Callback = function(value)
        local amount = tonumber(value)
        if amount and amount > 0 and amount <= 30000 then
            game:GetService("ReplicatedStorage").BankAction:FireServer("depo", amount)
            Library:Notify({
                Title = "Deposit",
                Description = "Deposited $" .. amount,
                Time = 3,
            })
        else
            Library:Notify({
                Title = "Error",
                Description = "Invalid amount! Max 30K.",
                Time = 3,
            })
        end
    end
})

local autoDropEnabled = false
BankGroupBox:AddToggle("DropMaxToggle", {
    Text = "Drop Max ($10k)",
    Default = false,
    Callback = function(value)
        autoDropEnabled = value
        if value then
            task.spawn(function()
                while autoDropEnabled do
                    game:GetService("ReplicatedStorage"):WaitForChild("BankProcessRemote"):InvokeServer("Drop", "10000")
                    Library:Notify({
                        Title = "Money Drop",
                        Description = "Dropped $10K",
                        Time = 2,
                    })
                    task.wait(1)
                end
            end)
        end
    end,
})

local autoDepositEnabled = false
BankGroupBox:AddToggle("AutoDeposit", {
    Text = "Auto Deposit 30K",
    Default = false,
    Callback = function(value)
        autoDepositEnabled = value
        if value then
            task.spawn(function()
                while autoDepositEnabled do
                    game:GetService("ReplicatedStorage"):WaitForChild("BankProcessRemote"):InvokeServer("Drop", "nan")
                    task.wait(0.1)
                    for _, v in ipairs(game:GetService("Workspace"):GetDescendants()) do
                        if v:IsA("ProximityPrompt") then
                            v.HoldDuration = 0
                            v.MaxActivationDistance = 6
                        end
                    end
                    task.wait(0.1)
                    game:GetService("ReplicatedStorage"):WaitForChild("BankAction"):FireServer("depo", "30000")
                    task.wait(2)
                    game:GetService("ReplicatedStorage"):WaitForChild("BankAction"):FireServer("depo", "30000")
                    task.wait(1)
                end
            end)
        end
    end,
})

local autoWithdrawEnabled = false
BankGroupBox:AddToggle("AutoWithdraw", {
    Text = "Auto Withdraw 90K",
    Default = false,
    Callback = function(value)
        autoWithdrawEnabled = value
        if value then
            task.spawn(function()
                while autoWithdrawEnabled do
                    game:GetService("ReplicatedStorage").BankAction:FireServer("with", 90000)
                    Library:Notify({
                        Title = "Auto Withdraw",
                        Description = "Withdrew $90K automatically",
                        Time = 2,
                    })
                    task.wait(1)
                end
            end)
        end
    end,
})


local BypassGroupBox = Tabs.Bypasses:AddLeftGroupbox("Bypasses 🛡️")

local bypassToggles = {}

local function instantPrompts()
    for _, v in ipairs(game:GetService("Workspace"):GetDescendants()) do
        if v:IsA("ProximityPrompt") then
            v.HoldDuration = 0
        end
    end
    
    game:GetService("Workspace").DescendantAdded:Connect(function(v)
        if v:IsA("ProximityPrompt") then
            v.HoldDuration = 0
        end
    end)
end

local function antiFall()
    local function checkFallDamage()
        local player = game.Players.LocalPlayer
        if player and player.Character then
            local fallDamage = player.Character:FindFirstChild("FallDamageRagdoll")
            if fallDamage then
                fallDamage.Disabled = true
            end
        end
    end
    
    task.spawn(function()
        while bypassToggles.AntiFallToggle.Value do
            task.wait(1)
            checkFallDamage()
        end
    end)
end

local function antiHunger()
    local function disableHunger()
        local player = game.Players.LocalPlayer
        if player and player:FindFirstChild("PlayerGui") then
            local hungerGui = player.PlayerGui:FindFirstChild("Hunger")
            if hungerGui then
                local hungerScript = hungerGui:FindFirstChild("Frame") and hungerGui.Frame:FindFirstChild("Frame") and 
                                   hungerGui.Frame.Frame:FindFirstChild("Frame") and hungerGui.Frame.Frame.Frame:FindFirstChild("HungerBarScript")
                if hungerScript then
                    hungerScript.Disabled = true
                end
            end
        end
    end
    
    task.spawn(function()
        while bypassToggles.AntiHungerToggle.Value do
            task.wait(1)
            disableHunger()
        end
    end)
end

local function antiSleep()
    local function disableSleep()
        local player = game.Players.LocalPlayer
        if player and player:FindFirstChild("PlayerGui") then
            local sleepGui = player.PlayerGui:FindFirstChild("SleepGui")
            if sleepGui then
                local sleepScript = sleepGui:FindFirstChild("Frame") and sleepGui.Frame:FindFirstChild("sleep") and 
                                 sleepGui.Frame.sleep:FindFirstChild("SleepBar") and sleepGui.Frame.sleep.SleepBar:FindFirstChild("sleepScript")
                if sleepScript then
                    sleepScript.Disabled = true
                end
            end
        end
    end
    
    task.spawn(function()
        while bypassToggles.AntiSleepToggle.Value do
            task.wait(1)
            disableSleep()
        end
    end)
end

local function antiStamina()
    local function disableStamina()
        local player = game.Players.LocalPlayer
        if player and player:FindFirstChild("PlayerGui") then
            local staminaScript = player.PlayerGui:FindFirstChild("Run") and player.PlayerGui.Run:FindFirstChild("Frame") and 
                               player.PlayerGui.Run.Frame:FindFirstChild("Frame") and player.PlayerGui.Run.Frame.Frame:FindFirstChild("Frame") and 
                               player.PlayerGui.Run.Frame.Frame.Frame:FindFirstChild("StaminaBarScript")
            if staminaScript then
                staminaScript.Disabled = true
            end
        end
    end
    
    task.spawn(function()
        while bypassToggles.AntiStaminaToggle.Value do
            task.wait(1)
            disableStamina()
        end
    end)
end

local function antiCameraShake()
    local function removeCameraBobbing()
        local player = game.Players.LocalPlayer
        if player and player.Character then
            local cameraBobbing = player.Character:FindFirstChild("CameraBobbing")
            if cameraBobbing then
                cameraBobbing:Destroy()
            end
        end
    end
    
    task.spawn(function()
        while bypassToggles.AntiCameraShakeToggle.Value do
            task.wait(1)
            removeCameraBobbing()
        end
    end)
end

local function antiRentPay()
    local player = game:GetService("Players").LocalPlayer
    local rentGui = player:FindFirstChild("PlayerGui") and player.PlayerGui:FindFirstChild("RentGui")
    
    if rentGui then
        local rentScript = rentGui:FindFirstChild("LocalScript")
        if rentScript then
            rentScript.Disabled = true
            rentScript:Destroy()
        end
    end
end

local function antiKnockback()
    for _, v in ipairs(game.Players.LocalPlayer.Character:GetDescendants()) do
        if (v:IsA("BodyVelocity") or v:IsA("LinearVelocity") or v:IsA("VectorForce")) then
            v:Destroy()
        end
    end
    
    if game.ReplicatedStorage:FindFirstChild("AE") then
        game.ReplicatedStorage.AE:Destroy()
    end
    
    game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").ChildAdded:Connect(function(v)
        if (v:IsA("BodyVelocity") or v:IsA("LinearVelocity") or v:IsA("VectorForce")) then
            v:Destroy()
        end
    end)
end

local function antiJumpCooldown()
    local player = game:GetService("Players").LocalPlayer
    local playerGui = player:FindFirstChild("PlayerGui")
    
    if playerGui then
        while bypassToggles.AntiJumpCooldownToggle.Value do
            local jumpDebounce = playerGui:FindFirstChild("JumpDebounce")
            if jumpDebounce then
                jumpDebounce:Destroy()
            end
            task.wait(1)
        end
    end
end

bypassToggles.InstantPromptsToggle = BypassGroupBox:AddToggle("InstantPromptsToggle", {
    Text = "Instant Prompts",
    Default = false,
    Callback = function(value)
        if value then
            instantPrompts()
            Library:Notify({
                Title = "Instant Prompts",
                Description = "Instant prompts bypass activated!",
                Time = 3,
            })
        end
    end,
    Tooltip = "Bypasses delay on proximity prompts",
})

bypassToggles.AntiFallToggle = BypassGroupBox:AddToggle("AntiFallToggle", {
    Text = "Anti-Fall ",
    Default = false,
    Callback = function(value)
        if value then
            antiFall()
            Library:Notify({
                Title = "Anti-Fall",
                Description = "Fall damage bypass activated!",
                Time = 3,
            })
        end
    end,
    Tooltip = "Disables fall damage",
})

bypassToggles.AntiHungerToggle = BypassGroupBox:AddToggle("AntiHungerToggle", {
    Text = "Anti-Hunger ",
    Default = false,
    Callback = function(value)
        if value then
            antiHunger()
            Library:Notify({
                Title = "Anti-Hunger",
                Description = "Hunger system Bypass!",
                Time = 3,
            })
        end
    end,
    Tooltip = "Disables hunger",
})

bypassToggles.AntiSleepToggle = BypassGroupBox:AddToggle("AntiSleepToggle", {
    Text = "Anti-Sleep ",
    Default = false,
    Callback = function(value)
        if value then
            antiSleep()
            Library:Notify({
                Title = "Anti-Sleep",
                Description = "Sleep System Bypassed!",
                Time = 3,
            })
        end
    end,
    Tooltip = "Disables sleep system",
})

bypassToggles.AntiStaminaToggle = BypassGroupBox:AddToggle("AntiStaminaToggle", {
    Text = "Anti-Stamina ",
    Default = false,
    Callback = function(value)
        if value then
            antiStamina()
            Library:Notify({
                Title = "Anti-Stamina",
                Description = "Stamina system Bypassed!",
                Time = 3,
            })
        end
    end,
    Tooltip = "Disables stamina system",
})

bypassToggles.AntiCameraShakeToggle = BypassGroupBox:AddToggle("AntiCameraShakeToggle", {
    Text = "Anti-CameraShake",
    Default = false,
    Callback = function(value)
        if value then
            antiCameraShake()
            Library:Notify({
                Title = "Anti-CameraShake",
                Description = "Camera shake bypass activated!",
                Time = 3,
            })
        end
    end,
    Tooltip = "Disables camera shake",
})

bypassToggles.AntiRentPayToggle = BypassGroupBox:AddToggle("AntiRentPayToggle", {
    Text = "Anti-RentPay",
    Default = false,
    Callback = function(value)
        if value then
            antiRentPay()
            Library:Notify({
                Title = "Anti-RentPay",
                Description = "Rent payment bypass activated!",
                Time = 3,
            })
        end
    end,
    Tooltip = "Disables rent payment",
})

bypassToggles.AntiKnockbackToggle = BypassGroupBox:AddToggle("AntiKnockbackToggle", {
    Text = "Anti-Knockback ",
    Default = false,
    Callback = function(value)
        if value then
            antiKnockback()
            Library:Notify({
                Title = "Anti-Knockback",
                Description = "Knockback bypass activated!",
                Time = 3,
            })
        end
    end,
    Tooltip = "Disables knockback effects",
})

bypassToggles.AntiJumpCooldownToggle = BypassGroupBox:AddToggle("AntiJumpCooldownToggle", {
    Text = "Anti-JumpCooldown ",
    Default = false,
    Callback = function(value)
        if value then
            antiJumpCooldown()
            Library:Notify({
                Title = "Anti-JumpCooldown",
                Description = "Jump cooldown bypass activated!",
                Time = 3,
            })
        end
    end,
    Tooltip = "Disables jump cooldown",
})


--ESP


local ESPGroupBox = Tabs.Combat:AddLeftGroupbox("ESP")

local ESP_SETTINGS = {
    Name = false,
    Health = false,
    Distance = false,
    Holding = false,
}

-- Function to get the item being held by the character
local function getHeldItem(character)
    if character then
        for _, tool in pairs(character:GetChildren()) do
            if tool:IsA("Tool") then
                return tool.Name
            end
        end
    end
    return nil
end

-- Function to create ESP for a player
local function createESP(player)
    if player == game.Players.LocalPlayer then return end

    local function setupCharacter(character)
        if not character then return end

        -- Check essential character parts
        local head = character:FindFirstChild("Head")
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if not head or not humanoid or not rootPart then return end

        -- Destroy any existing ESP elements
        for _, child in pairs(character:GetChildren()) do
            if child:IsA("BillboardGui") or child:IsA("Highlight") then
                child:Destroy()
            end
        end

        -- Create ESP elements for the player
        local nameGui = Instance.new("BillboardGui")
        nameGui.Name = "PlayerESP"
        nameGui.Parent = head
        nameGui.Adornee = head
        nameGui.Size = UDim2.new(5, 0, 1, 0)
        nameGui.StudsOffset = Vector3.new(0, 3, 0)
        nameGui.AlwaysOnTop = true

        local nameLabel = Instance.new("TextLabel")
        nameLabel.Parent = nameGui
        nameLabel.Size = UDim2.new(1, 0, 1, 0)
        nameLabel.BackgroundTransparency = 1
        nameLabel.TextSize = 15
        nameLabel.TextColor3 = Color3.new(1, 1, 1)
        nameLabel.Font = Enum.Font.Gotham
        nameLabel.TextStrokeTransparency = 0
        nameLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
        nameLabel.RichText = true

        local distanceGui = Instance.new("BillboardGui")
        distanceGui.Name = "DistanceHoldingESP"
        distanceGui.Parent = rootPart
        distanceGui.Adornee = rootPart
        distanceGui.Size = UDim2.new(4, 0, 0.2, 0)
        distanceGui.StudsOffset = Vector3.new(0, -2.5, 0)
        distanceGui.AlwaysOnTop = true

        local distanceLabel = Instance.new("TextLabel")
        distanceLabel.Parent = distanceGui
        distanceLabel.Size = UDim2.new(1, 0, 1, 0)
        distanceLabel.BackgroundTransparency = 1
        distanceLabel.TextSize = 15
        distanceLabel.TextColor3 = Color3.new(1, 1, 1)
        distanceLabel.Font = Enum.Font.Gotham
        distanceLabel.TextStrokeTransparency = 0
        distanceLabel.TextStrokeColor3 = Color3.new(0, 0, 0)

        local box = Instance.new("BoxHandleAdornment")
        box.Name = "BoxESP"
        box.Parent = rootPart
        box.Adornee = rootPart
        box.Size = Vector3.new(2, 3, 1)
        box.Transparency = 0.7
        box.Color3 = Color3.new(1, 1, 1)
        box.AlwaysOnTop = true

        local tracer = Drawing.new("Line")
        tracer.Visible = false
        tracer.Color = Color3.new(1, 1, 1)
        tracer.Thickness = 1
        tracer.Transparency = 1

        -- Update ESP elements on each frame
        local connection
        connection = game:GetService("RunService").Heartbeat:Connect(function()
            if not character or not rootPart then 
                if connection then connection:Disconnect() end
                if tracer then tracer:Remove() end
                return 
            end
            
            if humanoid then
                local healthPercent = math.floor((humanoid.Health / humanoid.MaxHealth) * 100)
                local healthColor = Color3.new(1 - healthPercent / 100, healthPercent / 100, 0)
                
                local nameText = ESP_SETTINGS.Name and player.Name or ""
                local healthText = ESP_SETTINGS.Health and ("HP: " .. healthPercent .. "%") or ""
                local separator = (ESP_SETTINGS.Name and ESP_SETTINGS.Health) and " | " or ""
                
                nameLabel.Text = nameText .. separator .. healthText
                nameGui.Enabled = ESP_SETTINGS.Name or ESP_SETTINGS.Health
                nameLabel.Visible = ESP_SETTINGS.Name or ESP_SETTINGS.Health

                local distanceText = ESP_SETTINGS.Distance and ("[" .. math.floor((game.Players.LocalPlayer.Character.HumanoidRootPart.Position - rootPart.Position).Magnitude) .. "m]") or ""
                local heldItem = ESP_SETTINGS.Holding and getHeldItem(character)
                local holdingText = heldItem and ("[" .. heldItem .. "]") or ""
                
                distanceLabel.Text = distanceText .. " " .. holdingText
                distanceGui.Enabled = ESP_SETTINGS.Distance or ESP_SETTINGS.Holding

                box.Visible = ESP_SETTINGS.Box

                if ESP_SETTINGS.Tracers then
                    local vector, onScreen = workspace.CurrentCamera:WorldToViewportPoint(rootPart.Position)
                    if onScreen then
                        tracer.From = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y)
                        tracer.To = Vector2.new(vector.X, vector.Y)
                        tracer.Visible = true
                    else
                        tracer.Visible = false
                    end
                else
                    tracer.Visible = false
                end
            end
        end)

        -- Disconnect when character is removed
        character.AncestryChanged:Connect(function()
            if not character:IsDescendantOf(workspace) then
                if connection then connection:Disconnect() end
                if tracer then tracer:Remove() end
            end
        end)
    end

    -- Initialize ESP for existing character
    if player.Character then
        setupCharacter(player.Character)
    end

    -- Setup ESP for newly added characters
    player.CharacterAdded:Connect(function(character)
        task.wait(1)
        setupCharacter(character)
    end)
end

-- Function to toggle ESP visibility
local function toggleESP(value)
    if value then
        for _, player in pairs(game:GetService("Players"):GetPlayers()) do
            createESP(player)
        end
        
        game:GetService("Players").PlayerAdded:Connect(function(player)
            createESP(player)
        end)
    else
        for _, player in pairs(game:GetService("Players"):GetPlayers()) do
            if player.Character then
                for _, child in pairs(player.Character:GetDescendants()) do
                    if child.Name == "PlayerESP" or child.Name == "DistanceHoldingESP" or 
                       child.Name == "BoxESP" then
                        child:Destroy()
                    end
                end
            end
        end
    end
end

-- Add toggles to control ESP settings
ESPGroupBox:AddToggle("ESPNameToggle", {
    Text = "Name",
    Default = false,
    Callback = function(value)
        ESP_SETTINGS.Name = value
        toggleESP(value or ESP_SETTINGS.Health or ESP_SETTINGS.Distance or 
                 ESP_SETTINGS.Holding or ESP_SETTINGS.Tracers or ESP_SETTINGS.Box)
    end
})

ESPGroupBox:AddToggle("ESPHealthToggle", {
    Text = "Health",
    Default = false,
    Callback = function(value)
        ESP_SETTINGS.Health = value
        toggleESP(value or ESP_SETTINGS.Name or ESP_SETTINGS.Distance or 
                 ESP_SETTINGS.Holding or ESP_SETTINGS.Tracers or ESP_SETTINGS.Box)
    end
})

ESPGroupBox:AddToggle("ESPDistanceToggle", {
    Text = "Distance",
    Default = false,
    Callback = function(value)
        ESP_SETTINGS.Distance = value
        toggleESP(value or ESP_SETTINGS.Name or ESP_SETTINGS.Health or 
                 ESP_SETTINGS.Holding or ESP_SETTINGS.Tracers or ESP_SETTINGS.Box)
    end
})

ESPGroupBox:AddToggle("ESPHoldingToggle", {
    Text = "Holding",
    Default = false,
    Callback = function(value)
        ESP_SETTINGS.Holding = value
        toggleESP(value or ESP_SETTINGS.Name or ESP_SETTINGS.Health or 
                 ESP_SETTINGS.Distance or ESP_SETTINGS.Tracers or ESP_SETTINGS.Box)
    end
})

local MenuGroup = Tabs["UI Settings"]:AddLeftGroupbox("Menu")

MenuGroup:AddToggle("KeybindMenuOpen", {
    Default = Library.KeybindFrame.Visible,
    Text = "Open Keybind Menu",
    Callback = function(value)
        Library.KeybindFrame.Visible = value
    end,
})

MenuGroup:AddToggle("ShowCustomCursor", {
    Text = "Custom Cursor 🖱️",
    Default = false,
    Callback = function(Value)
        Library.ShowCustomCursor = Value
    end,
})

MenuGroup:AddDivider()
MenuGroup:AddLabel("Menu bind")
    :AddKeyPicker("MenuKeybind", { Default = "RightShift", NoUI = true, Text = "Menu keybind" })

MenuGroup:AddButton("Unload", function()
    Library:Unload()
end)

Library:OnUnload(function()
    print("Unloaded!")
end)

Library.ToggleKeybind = Options.MenuKeybind

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ "MenuKeybind" })

ThemeManager:SetFolder("MyScriptHub")
SaveManager:SetFolder("MyScriptHub/specific-game")
SaveManager:SetSubFolder("specific-place")

SaveManager:BuildConfigSection(Tabs["UI Settings"])
ThemeManager:ApplyToGroupbox(MenuGroup)

SaveManager:LoadAutoloadConfig()
ThemeManager:ApplySavedTheme()
